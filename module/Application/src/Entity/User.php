<?php

/**
 * Auto generated by MySQL Workbench Schema Exporter.
 * Version 3.0.3 (doctrine2-annotation) on 2017-12-17 20:04:20.
 * Goto https://github.com/johmue/mysql-workbench-schema-exporter for more
 * information.
 */

namespace Application\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * Application\Entity\User
 *
 * @ORM\Entity(repositoryClass="Application\Repository\UserRepository")
 * @ORM\Table(name="`user`", uniqueConstraints={@ORM\UniqueConstraint(name="email_idx", columns={"email"})})
 */
class User
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", length=128)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=512)
     */
    protected $full_name;

    /**
     * @ORM\Column(name="`password`", type="string", length=256)
     */
    protected $password;

    /**
     * @ORM\Column(name="`status`", type="integer")
     */
    protected $status;

    /**
     * @ORM\Column(type="datetime")
     */
    protected $date_created;

    /**
     * @ORM\Column(type="string", length=32, nullable=true)
     */
    protected $pwd_reset_token;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    protected $pwd_reset_token_creation_date;

    /**
     * @ORM\OneToMany(targetEntity="UserRole", mappedBy="user")
     * @ORM\JoinColumn(name="id", referencedColumnName="user_id", nullable=false, onDelete="CASCADE")
     */
    protected $userRoles;

    public function __construct()
    {
        $this->userRoles = new ArrayCollection();
    }

    /**
     * Set the value of id.
     *
     * @param integer $id
     * @return \Application\Entity\User
     */
    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get the value of id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set the value of email.
     *
     * @param string $email
     * @return \Application\Entity\User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get the value of email.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set the value of full_name.
     *
     * @param string $full_name
     * @return \Application\Entity\User
     */
    public function setFullName($full_name)
    {
        $this->full_name = $full_name;

        return $this;
    }

    /**
     * Get the value of full_name.
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->full_name;
    }

    /**
     * Set the value of password.
     *
     * @param string $password
     * @return \Application\Entity\User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get the value of password.
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set the value of status.
     *
     * @param integer $status
     * @return \Application\Entity\User
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get the value of status.
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set the value of date_created.
     *
     * @param \DateTime $date_created
     * @return \Application\Entity\User
     */
    public function setDateCreated($date_created)
    {
        $this->date_created = $date_created;

        return $this;
    }

    /**
     * Get the value of date_created.
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->date_created;
    }

    /**
     * Set the value of pwd_reset_token.
     *
     * @param string $pwd_reset_token
     * @return \Application\Entity\User
     */
    public function setPwdResetToken($pwd_reset_token)
    {
        $this->pwd_reset_token = $pwd_reset_token;

        return $this;
    }

    /**
     * Get the value of pwd_reset_token.
     *
     * @return string
     */
    public function getPwdResetToken()
    {
        return $this->pwd_reset_token;
    }

    /**
     * Set the value of pwd_reset_token_creation_date.
     *
     * @param \DateTime $pwd_reset_token_creation_date
     * @return \Application\Entity\User
     */
    public function setPwdResetTokenCreationDate($pwd_reset_token_creation_date)
    {
        $this->pwd_reset_token_creation_date = $pwd_reset_token_creation_date;

        return $this;
    }

    /**
     * Get the value of pwd_reset_token_creation_date.
     *
     * @return \DateTime
     */
    public function getPwdResetTokenCreationDate()
    {
        return $this->pwd_reset_token_creation_date;
    }

    /**
     * Add UserRole entity to collection (one to many).
     *
     * @param \Application\Entity\UserRole $userRole
     * @return \Application\Entity\User
     */
    public function addUserRole(UserRole $userRole)
    {
        $this->userRoles[] = $userRole;

        return $this;
    }

    /**
     * Remove UserRole entity from collection (one to many).
     *
     * @param \Application\Entity\UserRole $userRole
     * @return \Application\Entity\User
     */
    public function removeUserRole(UserRole $userRole)
    {
        $this->userRoles->removeElement($userRole);

        return $this;
    }

    /**
     * Get UserRole entity collection (one to many).
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserRoles()
    {
        return $this->userRoles;
    }

    public function __sleep()
    {
        return array('id', 'email', 'full_name', 'password', 'status', 'date_created', 'pwd_reset_token', 'pwd_reset_token_creation_date');
    }
}